{"version":3,"sources":["panels/Home.js","img/persik.png","panels/WelcomeScreen.js","panels/QRListScreen.js","panels/AllowedQRListScreen.js","App.js","index.js"],"names":["Home","id","go","showQRReader","fetchedUser","onClick","expandable","before","data-to","WelcomeScreen","icon","header","action","size","QRListScreen","codeList","setCodeList","left","map","code","multiline","removable","onRemove","i","console","log","filter","text","AllowedQRListScreen","allowedList","label","platform","VKCOM","undefined","word","index","length","res","b","allowedCode","toLowerCase","includes","push","getAllowedList","getNotAllowedList","App","useState","activePanel","setActivePanel","setUser","popout","setPopout","setScheme","maxId","setMaxId","useEffect","a","bridge","send","user","subscribe","detail","type","data","schemeAttribute","document","createAttribute","value","body","attributes","setNamedItem","code_data","fetchData","e","currentTarget","dataset","to","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e778e812.chunk.js","sourcesContent":["import React from 'react';\n\nimport {Panel, PanelHeader, Separator, SimpleCell} from '@vkontakte/vkui';\nimport {Icon28QrCodeOutline, Icon28ScanViewfinderOutline, Icon28StarsCircleFillViolet} from \"@vkontakte/icons\";\n\nconst Home = ({id, go, fetchedUser, showQRReader}) => {\n    const START_SIZE = 8\n    /*\n        const [bitsSize, setBitsSize] = useState(START_SIZE)\n        const [bitsInSecond, setBitsInSecond] = useState(Array.from({length: bitsSize}, (v, i) => 0))\n        const [currentSecond, setCurrentSecond] = useState(0)\n        const [myInterval, setMyInterval] = useState(null)\n\n        const switchChange = (index, value) => {\n            stopPressed()\n            bitsInSecond[index] = bitsInSecond[index] ^ 1\n        }\n\n        const startPressed = (bits) => {\n            if (myInterval !== null) {\n                clearInterval(myInterval)\n            }\n            let sec = 0\n            setCurrentSecond(1)\n            console.log(bits[0])\n            bridge.send(\"VKWebAppFlashSetLevel\", {\"level\": bits[0]});\n            let timerId = setInterval(() => {\n                sec = (sec + 1) % (bitsSize)\n                setCurrentSecond(sec + 1)\n                console.log(bits[sec])\n                bridge.send(\"VKWebAppFlashSetLevel\", {\"level\": bits[sec]});\n            }, 1000);\n            setMyInterval(timerId)\n        }\n\n        const stopPressed = () => {\n            clearInterval(myInterval)\n            setCurrentSecond(0)\n            console.log(\"Stop!\")\n            bridge.send(\"VKWebAppFlashSetLevel\", {\"level\": 0});\n        }*/\n\n    return <Panel id={id}>\n        <PanelHeader>QR приложулька</PanelHeader>\n\n        <SimpleCell onClick={showQRReader} expandable before={<Icon28ScanViewfinderOutline/>}>\n            Отсканировать QR\n        </SimpleCell>\n\n        <SimpleCell onClick={go} data-to='QrList' expandable before={<Icon28QrCodeOutline/>}>\n            Список отсканированных QR кодов\n        </SimpleCell>\n\n        <Separator/>\n\n        <SimpleCell onClick={go} data-to='AllowedQrList' expandable before={<Icon28StarsCircleFillViolet/>}>\n            Бонусное задание\n        </SimpleCell>\n    </Panel>\n}\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/persik.ae9f0072.png\";","import React from \"react\";\r\nimport {Button, Group, Panel, PanelHeader, PanelHeaderBack, Placeholder} from \"@vkontakte/vkui\";\r\nimport persik from \"../img/persik.png\";\r\nimport {Icon56UsersOutline} from \"@vkontakte/icons\";\r\n\r\nconst WelcomeScreen = ({id, fetchedUser, go}) => {\r\n    const getName = (user) => {\r\n        // if (user == null || user.first_name == null)\r\n        //     return \"Друже\"\r\n        // return fetchedUser.first_name\r\n        return \"Приятель\"\r\n    }\r\n\r\n    return (\r\n        <Panel id={id}>\r\n            {/*<PanelHeader right={<Avatar size={36} />}>Panel 1</PanelHeader>*/}\r\n            <Group>\r\n                <Placeholder\r\n                    icon={<Icon56UsersOutline />}\r\n                    header={\"Приветствуем, \" + getName(fetchedUser) + \"!\"}\r\n                    action={<Button size=\"m\" onClick={go} data-to=\"Home\">Перейти к QR кодам</Button>}\r\n                >\r\n                    Приложение разработано в рамках хакатона \"Финал Вездекода 2021\"\r\n                </Placeholder>\r\n            </Group>\r\n        </Panel>\r\n    )\r\n}\r\n\r\nexport default WelcomeScreen;","import React from 'react';\n\nimport {\n    Cell,\n    Group,\n    List,\n    Panel,\n    PanelHeader,\n    PanelHeaderBack,\n    PanelHeaderClose,\n    platform,\n    VKCOM\n} from '@vkontakte/vkui';\n\nconst QRListScreen = ({id, go, fetchedUser, codeList, setCodeList}) => {\n    const onDragFinish = (from, to) => {\n        const draggingList = [...codeList];\n        draggingList.splice(from, 1);\n        draggingList.splice(to, 0, codeList[from]);\n        setCodeList(draggingList);\n    }\n\n    const onRemove = (i) => {\n        console.log(\"onRemove id: \" + i)\n        console.log(\"Before: \" + codeList)\n        console.log(\"After: \" + codeList.filter((code) => code.id !== i))\n        setCodeList(codeList.filter((code) => code.id !== i))\n    }\n\n    return <Panel id={id}>\n        <PanelHeader\n            left={<PanelHeaderBack onClick={go} data-to={'Home'}/>}\n        >Список кодов</PanelHeader>\n        <Group>\n            <List>\n                {codeList.map((code) =>\n                    <Cell multiline key={code.id}\n                          removable onRemove={() => {onRemove(code.id)}}\n                    >\n                        {code.text}\n                    </Cell>\n                )}\n            </List>\n        </Group>\n    </Panel>\n}\n\nexport default QRListScreen;\n","import React from 'react';\n\nimport {\n    Cell,\n    Group,\n    Header,\n    List,\n    MiniInfoCell,\n    Panel,\n    PanelHeader,\n    PanelHeaderBack,\n    platform,\n    Text,\n    VKCOM\n} from '@vkontakte/vkui';\nimport {Icon20ArticleOutline} from \"@vkontakte/icons\";\n\nconst AllowedQRListScreen = ({id, go, fetchedUser, codeList, allowedList}) => {\n    const getAllowedList = () => {\n        console.log(codeList)\n        console.log(allowedList)\n        let res = []\n        for (let code of codeList) {\n            console.log(\"code: \" + code.text)\n            console.log(\"codeType: \" + typeof(code.text))\n            let b = false\n            for (let allowedCode of allowedList) {\n                if (code.text.toLowerCase().includes(allowedCode.text.toLowerCase())) {\n                    b = true\n                    break\n                }\n            }\n            if (b) {\n                res.push(code)\n            }\n        }\n        return res\n    }\n\n    const getNotAllowedList = () => {\n        let res = []\n        for (let code of codeList) {\n            let b = false\n            for (let allowedCode of allowedList) {\n                if (code.text.toLowerCase().includes(allowedCode.text.toLowerCase())) {\n                    b = true\n                    break\n                }\n            }\n            if (!b) {\n                res.push(code)\n            }\n        }\n        return res\n    }\n\n    const getAllowedFormat = () => {\n        return allowedList.map((word, index) => \"\\\"\" + word.text + \"\\\"\" + (index === allowedList.length - 1 ? \"\" : \",\"))\n    }\n\n    return <Panel id={id}>\n        <PanelHeader\n            left={<PanelHeaderBack onClick={go} data-to={'Home'} label={platform === VKCOM ? 'Назад' : undefined}/>}\n        >Разрешенные коды</PanelHeader>\n        <Cell multiline> Код считается разрешенным, если включает в себя одну из следующий строк: { getAllowedFormat() }</Cell>\n        <Text>\n        </Text>\n        <Group header={<Header>Разрешенные коды</Header>}>\n            <List>\n                {getAllowedList().map((code) =>\n                    <Cell key={code.id}>{code.text}</Cell>\n                )}\n            </List>\n        </Group>\n        <Group header={<Header>Неразрешенные коды</Header>}>\n            <List>\n                {getNotAllowedList().map((code) =>\n                    <Cell key={code.id}>{code.text}</Cell>\n                )}\n            </List>\n        </Group>\n    </Panel>\n}\n\nexport default AllowedQRListScreen;\n","import React, {useEffect, useState} from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport {AdaptivityProvider, AppRoot, ScreenSpinner, View} from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home';\nimport WelcomeScreen from \"./panels/WelcomeScreen\";\nimport QRListScreen from \"./panels/QRListScreen\";\nimport AllowedQRListScreen from \"./panels/AllowedQRListScreen\";\n\nconst App = (allowedList1 = allowedList) => {\n    const [activePanel, setActivePanel] = useState('WelcomeScreen');\n    const [fetchedUser, setUser] = useState(null);\n    const [popout, setPopout] = useState(<ScreenSpinner size='large'/>);\n    const [scheme, setScheme] = useState(null)\n    const [codeList, setCodeList] = useState(\n        [{text: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', id: 1}, {text: 'BBB', id: 2}, {text: 'CCCC', id: 3}]\n    )\n    const [maxId, setMaxId] = useState(10)\n\n    const allowedList = [{text:\"test\", id: 4}, {text:\"база\", id: 5}, {text:\"123\", id: 6}]\n\n    useEffect(() => {\n        bridge.subscribe(({detail: {type, data}}) => {\n            if (type === 'VKWebAppUpdateConfig') {\n                const schemeAttribute = document.createAttribute('scheme')\n                // schemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n                schemeAttribute.value = 'client_light';\n                setScheme(schemeAttribute.value)\n                document.body.attributes.setNamedItem(schemeAttribute);\n            }\n            if (type === 'VKWebAppOpenCodeReaderResult') {\n                console.log(data)\n                setCodeList([...codeList, {text: data.code_data, id: maxId}])\n                setMaxId(maxId + 1)\n            }\n        });\n\n        async function fetchData() {\n            setPopout(null);\n            const user = await bridge.send('VKWebAppGetUserInfo');\n            setUser(user);\n        }\n\n        fetchData();\n    }, []);\n\n    const go = e => {\n        setActivePanel(e.currentTarget.dataset.to);\n    };\n\n    const showQRReader = () => {\n        bridge.send(\"VKWebAppOpenCodeReader\")\n    }\n\n    return (\n        <AdaptivityProvider>\n            <AppRoot>\n                <View activePanel={activePanel} popout={popout}>\n                    <WelcomeScreen id='WelcomeScreen' fetchedUser={fetchedUser} go={go}/>\n                    <Home id='Home' fetchedUser={fetchedUser} go={go} showQRReader={showQRReader}/>\n                    <QRListScreen id='QrList' fetchedUser={fetchedUser} go={go}\n                                  codeList={codeList}\n                                  setCodeList={setCodeList}/>\n                    <AllowedQRListScreen id='AllowedQrList'\n                                         fetchedUser={fetchedUser}\n                                         go={go}\n                                         codeList={codeList}\n                                         allowedList={allowedList}/>\n                </View>\n            </AppRoot>\n        </AdaptivityProvider>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n}\n"],"sourceRoot":""}